From ac826674af32dced3f04ac960f0ebcc7e21abced Mon Sep 17 00:00:00 2001
From: Hans Dembinski <HDembinski@users.noreply.github.com>
Date: Tue, 15 Dec 2020 10:01:36 +0100
Subject: [PATCH 5/7] added msvc fixes from pybind11/cmake_example by henryiii
 (#576)

* added msvc fixes from pybind11/cmake_example by henryiii

Co-authored-by: Henry Schreiner <henry.fredrick.schreiner@cern.ch>
---
 cmake_ext.py | 49 ++++++++++++++++++++++++++++++++++---------------
 setup.py     |  2 +-
 2 files changed, 35 insertions(+), 16 deletions(-)

diff --git a/cmake_ext.py b/cmake_ext.py
index 912b654a..57242df1 100644
--- a/cmake_ext.py
+++ b/cmake_ext.py
@@ -1,6 +1,5 @@
 import sys
 import os
-import platform
 import subprocess
 from setuptools import Extension
 from setuptools.command.build_ext import build_ext
@@ -8,18 +7,14 @@
 
 
 class CMakeExtension(Extension):
-    def __init__(self, sourcedir=""):
-        Extension.__init__(self, "CMakeExtension", sources=[])
+    def __init__(self, name, sourcedir=""):
+        Extension.__init__(self, name, sources=[])
         self.sourcedir = os.path.abspath(sourcedir)
 
 
 class CMakeBuild(build_ext):
-    def run(self):
-        for ext in self.extensions:
-            self.build_extension(ext)
-
     def build_extension(self, ext):
-        extdir = Path(self.get_ext_fullpath(ext.name)).parent.absolute() / "iminuit"
+        extdir = Path(self.get_ext_fullpath(ext.name)).parent.absolute()
         # required for auto-detection of auxiliary "native" libs
         cmake_args = [
             f"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY={extdir}/",
@@ -28,17 +23,41 @@ def build_extension(self, ext):
 
         debug = int(os.environ.get("DEBUG", 0)) if self.debug is None else self.debug
         cfg = "Debug" if debug else "Release"
+
+        # CMake lets you override the generator - we need to check this.
+        # Can be set with Conda-Build, for example.
+        cmake_generator = os.environ.get("CMAKE_GENERATOR", "")
+
         cmake_args += [f"-DCMAKE_BUILD_TYPE={cfg}"]
         build_args = ["--config", cfg]  # needed by some generators, e.g. on Windows
 
-        if platform.system() == "Windows":
-            cmake_args += [f"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{cfg.upper()}={extdir}"]
-            is_x86 = sys.maxsize > 2 ** 32
-            cmake_args += ["-A", "x64" if is_x86 else "Win32"]
-            build_args += ["--", "/m:1"]
-        else:
+        if self.compiler.compiler_type == "msvc":
+            # CMake allows an arch-in-generator style for backward compatibility
+            contains_arch = any(x in cmake_generator for x in ("ARM", "Win64"))
+
+            # Specify the arch if using MSVC generator, but only if it doesn't
+            # contain a backward-compatibility arch spec already in the
+            # generator name.
+            if not contains_arch:
+                # Convert distutils Windows platform specifiers to CMake -A arguments
+                arch = {
+                    "win32": "Win32",
+                    "win-amd64": "x64",
+                    "win-arm32": "ARM",
+                    "win-arm64": "ARM64",
+                }[self.plat_name]
+                cmake_args += ["-A", arch]
+
+            cmake_args += [
+                "-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{}={}".format(cfg.upper(), extdir)
+            ]
+
+        # Set CMAKE_BUILD_PARALLEL_LEVEL to control the parallel build level
+        # across all generators.
+        if "CMAKE_BUILD_PARALLEL_LEVEL" not in os.environ:
+            # CMake 3.12+ only.
             njobs = self.parallel or os.cpu_count() or 1
-            build_args += ["--", f"-j{njobs}"]
+            build_args += [f"-j{njobs}"]
 
         print(f"cmake args: {' '.join(cmake_args)}")
         print(f"build args: {' '.join(build_args)}")
diff --git a/setup.py b/setup.py
index d2503917..a5d559ba 100644
--- a/setup.py
+++ b/setup.py
@@ -44,7 +44,7 @@
     version=version,
     python_requires=">=3.6",
     zip_safe=False,
-    ext_modules=[CMakeExtension()],
+    ext_modules=[CMakeExtension("iminuit._core")],
     cmdclass=dict(build_ext=CMakeBuild),
     classifiers=[
         "Development Status :: 5 - Production/Stable",

